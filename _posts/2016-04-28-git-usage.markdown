---
layout: post
title:  git的基础用法
date:   2016-04-28
categories: git
tags: git
---

# git常用命令

### 设置用户

    $ git config --global user.name "Your Name"
    $ git config --global user.email "email@example.com"

### 创建空仓库

    $ git init

### 添加修改

    $ git add readme.txt

### 提交修改
    
    $ git commit -m "wrote a readme file"

### 推送修改

    $ git push

### 查看仓库状态

    $ git status

### 比较文件变化

    $ git diff readme.txt

### 比较工作目录与版本库最新版的变化

    $ git diff HEAD -- readme.txt

### 查看版本日志

    $ git log

### 查看历史命令记录

    $ git reflog

### 回到上一个版本

    $ git reset --hard HEAD^

### 回到上100个版本

    $ git reset --hard HEAD~100

### 回到指定版本

    $ git reset --hard 3628164

### 检出版本库指定文件，相当于撤销工作目录指定文件的修改/非git rm操作
    
    $ git checkout -- readme.txt

### 从版本库还原，相当于撤销暂存区（unstage）指定文件的修改（add 命令添加的修改）
    
    $ git reset HEAD readme.txt

### 删除文件

    $ git rm test.txt

### 关联远程仓库
    
    $ git remote add origin git@github.com:kiinlam/learngit.git

### 推送到远程仓库

    # 加上-u参数，将远程仓库分支master关联起来
    $ git push -u origin master
    # 再次推送
    $ git push origin master

### 从远程仓库克隆

    $ git clone git@github.com:kiinlam/learngit.git

### 创建分支

    $ git branch dev

### 切换分支

    $ git checkout dev

### 新建并切换分支

    $ git checkout -b dev

### 从远程仓库检出分支

    $ git checkout -b dev origin/dev

### 查看分支

    $ git branch

### 合并分支

    $ git merge dev

### 删除分支

    $ git branch -d dev

### 查看分支合并图

    $ git log --graph --pretty=oneline --abbrev-commit

### 禁用Fast forward模式进行分支合并，可产生一个commit
    
    $ git merge --no-ff -m "merge with no-ff" dev

### 保存当前工作区状态
    
    $ git stash

### 查看已保存的工作区状态

    $ git stash list

### 恢复指定工作区状态

    $ git stash apply stash@{0}

### 删除指定工作区状态

    $ git stash drop stash@{0}

### 恢复并删除工作区状态

    $ git stash pop

### 强制删除分支
    
    # -d 为普通删除
    $ git branch -D feature

### 查看远程库的信息

    $ git remote
    $ git remote -v

### 推送分支

    $ git push origin master
    $ git push origin dev

### 抓取分支

    $ git pull

### 重关联本地仓库与远程仓库

    $ git branch --set-upstream dev origin/dev

### 重定位远程仓库地址

    $ git remote set-url origin [NEW_URL]

### 打标签

    $ git tag tagname

### 查看标签

    $ git tag

### 在指定commit id上打标签

    $ git tag v0.9 6224937

### 查看标签信息

    $ git show tagname

### 创建带有说明的标签
    
    # -a 标签名; -m 标签说明
    $ git tag -a v0.1 -m "version 0.1 released" 3628164

### 删除标签

    $ git tag -d tagname

### 推送指定标签到远程仓库

    $ git push origin tagname

### 推送全部标签到远程仓库

    $ git push origin --tags

### 删除远程仓库上本地已删除的标签

    $ git push origin :refs/tags/tagname

### 设置git显示颜色

    $ git config --global color.ui true

### 设置命令别名
    
    $ git config --global alias.st status
    $ git config --global alias.ci commit
    # 使用字符串方式
    # $ git unstage test.py --> $ git reset HEAD test.py
    $ git config --global alias.unstage 'reset HEAD'
    # 显示最后一次提交信息
    $ git config --global alias.last 'log -1'
    # 格式化最后一次的提交信息
    $ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

### 配置文件

    # 配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
    # 每个仓库的Git配置文件都放在.git/config文件中
    # 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中